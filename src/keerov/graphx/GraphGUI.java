package keerov.graphx;

import java.awt.BorderLayout;
import java.io.File;
import java.util.List;
import javax.swing.Box;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Keerov
 * thekeerov@gmail.com
 */
public class GraphGUI extends javax.swing.JFrame {

	private final Drawing drawing;
	private boolean infoPanelVisible;
	private boolean showAxis;

	public GraphGUI() {
		initComponents();

		drawing = new Drawing(this);

		infoPanelVisible = true;
		showAxis = false;

		pnlMain.setLayout(new java.awt.BorderLayout());
		pnlMain.add(drawing, BorderLayout.CENTER);
		pnlMain.repaint();

		txtVertexName.requestFocus();

		drawing.showEdgeCost(chckCost.isSelected());
		drawing.showEdgeFlow(chckFlow.isSelected());
		drawing.showVertexDist(chckDist.isSelected());

		DefaultCaret caret = (DefaultCaret) console.getCaret();
		caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

		this.setTitle("New Graph");

	}

	public void console(String msg) {
		console.append(msg + "\n");
	}

	public void info(String name, int cost, int flow, int dist, boolean visited, List<String> adj, List<String> adjEnt) {
		txtInfoVertexName.setText(name);
		txtInfoCost.setText(String.valueOf(cost));
		txtInfoFlow.setText(String.valueOf(flow));
		txtInfoDist.setText(String.valueOf(dist));
		txtInfoVisited.setText(String.valueOf(visited));
		if (adj != null) {
			String adj_s = "";
			for (String a : adj) {
				adj_s += a + " ";
			}
			txtInfoAdj.setText(adj_s);
		}
		if (adjEnt != null) {
			String adj_ent = "";
			for (String a : adjEnt) {
				adj_ent += a + " ";
			}
			txtInfoAdjEntering.setText(adj_ent);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		btnClearGraph = new javax.swing.JButton();
		btnEdit = new javax.swing.JButton();
		btnAStar = new javax.swing.JButton();
		btnapplyvertexname = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		txtVertexName = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		txtEdgeCost = new javax.swing.JTextField();
		btnAddCost = new javax.swing.JButton();
		pnlMain = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		console = new javax.swing.JTextArea();
		pnlInfo = new javax.swing.JPanel();
		btnDijkstra = new javax.swing.JButton();
		btnMST = new javax.swing.JButton();
		btnFordFulkerson = new javax.swing.JButton();
		btnIsBipartite = new javax.swing.JButton();
		chckDirected = new javax.swing.JCheckBox();
		chckCost = new javax.swing.JCheckBox();
		chckDist = new javax.swing.JCheckBox();
		chckFlow = new javax.swing.JCheckBox();
		chckVertexName = new javax.swing.JCheckBox();
		btnBFS = new javax.swing.JButton();
		btnDFS = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		txtInfoVertexName = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		txtInfoAdj = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		txtInfoAdjEntering = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		txtInfoCost = new javax.swing.JTextField();
		jLabel7 = new javax.swing.JLabel();
		txtInfoFlow = new javax.swing.JTextField();
		jLabel8 = new javax.swing.JLabel();
		txtInfoDist = new javax.swing.JTextField();
		jLabel9 = new javax.swing.JLabel();
		txtInfoVisited = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		CtrShowHide = new javax.swing.JTextArea();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		menuSave = new javax.swing.JMenuItem();
		menuLoad = new javax.swing.JMenuItem();
		menuShowGrid = new javax.swing.JMenuItem();
		menuScale = new javax.swing.JMenuItem();
		exitMenuItem = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		menuCreateRandomGraph = new javax.swing.JMenuItem();
		btnMakeComplete = new javax.swing.JMenuItem();
		menuExecutionPause = new javax.swing.JMenuItem();
		menuResultPause = new javax.swing.JMenuItem();
		menuStopExec = new javax.swing.JMenuItem();
		menuCreateMap = new javax.swing.JMenuItem();
		jMenu3 = new javax.swing.JMenu();
		menuDeleteVertex = new javax.swing.JMenuItem();
		btnMarkVisited = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		btnClearGraph.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnClearGraph.setText("Clear Graph");
		btnClearGraph.setAlignmentY(0.0F);
		btnClearGraph.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnClearGraphActionPerformed(evt);
			}
		});

		btnEdit.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnEdit.setText("Edit Graph");
		btnEdit.setAlignmentY(0.0F);
		btnEdit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnDoneActionPerformed(evt);
			}
		});

		btnapplyvertexname.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnapplyvertexname.setText("Add");
		btnapplyvertexname.setAlignmentY(0.0F);
		btnapplyvertexname.setEnabled(false);
		btnapplyvertexname.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnapplyvertexnameActionPerformed(evt);
			}
		});

		jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel1.setText("Vertex Name:");

		txtVertexName.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtVertexName.setEnabled(false);
		txtVertexName.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				txtVertexNameKeyPressed(evt);
			}
		});

		jLabel2.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel2.setText("Edge Cost:");

		txtEdgeCost.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtEdgeCost.setEnabled(false);
		txtEdgeCost.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				txtEdgeCostKeyPressed(evt);
			}
		});

		btnAddCost.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnAddCost.setText("Add");
		btnAddCost.setAlignmentY(0.0F);
		btnAddCost.setEnabled(false);
		btnAddCost.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnAddCostActionPerformed(evt);
			}
		});

		pnlMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
		pnlMain.setLayout(pnlMainLayout);
		pnlMainLayout.setHorizontalGroup(
				pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE)
				);
		pnlMainLayout.setVerticalGroup(
				pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE)
				);

		console.setEditable(false);
		console.setColumns(20);
		console.setLineWrap(true);
		console.setRows(5);
		console.setFocusable(false);
		console.setRequestFocusEnabled(false);
		jScrollPane1.setViewportView(console);

		pnlInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		btnDijkstra.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnDijkstra.setText("Dijkstra");
		btnDijkstra.setAlignmentY(0.0F);
		btnDijkstra.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnDijkstraActionPerformed(evt);
			}
		});

		btnMST.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnMST.setText("MST");
		btnMST.setAlignmentY(0.0F);
		btnMST.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnMSTActionPerformed(evt);
			}
		});

		btnFordFulkerson.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnFordFulkerson.setText("Ford-Fulkerson");
		btnFordFulkerson.setAlignmentY(0.0F);
		btnFordFulkerson.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnFordFulkersonActionPerformed(evt);
			}
		});

		btnIsBipartite.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnIsBipartite.setText("Bipartiteness");
		btnIsBipartite.setAlignmentY(0.0F);
		btnIsBipartite.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnIsBipartiteActionPerformed(evt);
			}
		});

		chckDirected.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		chckDirected.setSelected(true);
		chckDirected.setText("Directed");
		chckDirected.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chckDirectedActionPerformed(evt);
			}
		});

		chckCost.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		chckCost.setSelected(true);
		chckCost.setText("Cost/Weight");
		chckCost.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chckCostActionPerformed(evt);
			}
		});

		chckDist.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		chckDist.setText("Distance");
		chckDist.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chckDistActionPerformed(evt);
			}
		});

		chckFlow.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		chckFlow.setText("Flow");
		chckFlow.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chckFlowActionPerformed(evt);
			}
		});

		chckVertexName.setSelected(true);
		chckVertexName.setText("Name");
		chckVertexName.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				chckVertexNameActionPerformed(evt);
			}
		});

		btnBFS.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnBFS.setText("Breadth First Seach");
		btnBFS.setAlignmentY(0.0F);
		btnBFS.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnBFSActionPerformed(evt);
			}
		});

		btnDFS.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		btnDFS.setText("Depth First Seach");
		btnDFS.setAlignmentY(0.0F);
		btnDFS.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnDFSActionPerformed(evt);
			}
		});

		jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		jLabel3.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel3.setText("Name:");

		txtInfoVertexName.setEditable(false);
		txtInfoVertexName.setBackground(java.awt.Color.lightGray);
		txtInfoVertexName.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoVertexName.setFocusable(false);

		jLabel4.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel4.setText("Adjacent Neighbors:");

		txtInfoAdj.setEditable(false);
		txtInfoAdj.setBackground(java.awt.Color.lightGray);
		txtInfoAdj.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoAdj.setFocusable(false);

		jLabel5.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel5.setText("Previous Neighbors:");

		txtInfoAdjEntering.setEditable(false);
		txtInfoAdjEntering.setBackground(java.awt.Color.lightGray);
		txtInfoAdjEntering.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoAdjEntering.setFocusable(false);

		jLabel6.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel6.setText("Cost/Weight:");

		txtInfoCost.setEditable(false);
		txtInfoCost.setBackground(java.awt.Color.lightGray);
		txtInfoCost.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoCost.setFocusable(false);

		jLabel7.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel7.setText("Flow:");

		txtInfoFlow.setEditable(false);
		txtInfoFlow.setBackground(java.awt.Color.lightGray);
		txtInfoFlow.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoFlow.setFocusable(false);

		jLabel8.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel8.setText("Distance:");

		txtInfoDist.setEditable(false);
		txtInfoDist.setBackground(java.awt.Color.lightGray);
		txtInfoDist.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoDist.setFocusable(false);

		jLabel9.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jLabel9.setText("Visited:");

		txtInfoVisited.setEditable(false);
		txtInfoVisited.setBackground(java.awt.Color.lightGray);
		txtInfoVisited.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		txtInfoVisited.setFocusable(false);

		btnAStar.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        btnAStar.setText("A* Search");
        btnAStar.setAlignmentY(0.0F);
        btnAStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAStarActionPerformed(evt);
            }
        });
		
		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addComponent(jLabel3)
						.addGap(1, 1, 1)
						.addComponent(txtInfoVertexName))
						.addComponent(txtInfoAdj)
						.addComponent(txtInfoAdjEntering)
						.addGroup(jPanel3Layout.createSequentialGroup()
								.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel4)
										.addComponent(jLabel5))
										.addGap(0, 0, Short.MAX_VALUE))
										.addGroup(jPanel3Layout.createSequentialGroup()
												.addComponent(jLabel6)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(txtInfoCost))
												.addGroup(jPanel3Layout.createSequentialGroup()
														.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(jLabel8)
																.addComponent(jLabel7)
																.addComponent(jLabel9))
																.addGap(32, 32, 32)
																.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(txtInfoVisited)
																		.addComponent(txtInfoFlow)
																		.addComponent(txtInfoDist)))
				);
		jPanel3Layout.setVerticalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3)
								.addComponent(txtInfoVertexName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel4)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(txtInfoAdj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel5)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(txtInfoAdjEntering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel6)
										.addComponent(txtInfoCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel7)
												.addComponent(txtInfoFlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel8)
														.addComponent(txtInfoDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jLabel9)
																.addComponent(txtInfoVisited, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addContainerGap())
				);

		javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
		pnlInfo.setLayout(pnlInfoLayout);
		pnlInfoLayout.setHorizontalGroup(
				pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(btnDijkstra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btnMST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btnFordFulkerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(btnIsBipartite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(pnlInfoLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(pnlInfoLayout.createSequentialGroup()
										.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(chckVertexName)
												.addComponent(chckFlow))
												.addGap(0, 0, Short.MAX_VALUE))
												.addGroup(pnlInfoLayout.createSequentialGroup()
														.addComponent(chckDirected)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(chckDist)
																.addComponent(chckCost))
																.addGap(0, 0, Short.MAX_VALUE)))
																.addContainerGap())
																.addGroup(pnlInfoLayout.createSequentialGroup()
																		.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
																				.addComponent(btnAStar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																				.addComponent(btnBFS, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(btnDFS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		pnlInfoLayout.setVerticalGroup(
				pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(pnlInfoLayout.createSequentialGroup()
						.addComponent(btnDijkstra)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(btnMST)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(btnFordFulkerson)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(btnIsBipartite)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(btnBFS)
								.addComponent(btnDFS))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(btnAStar)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(chckDirected)
										.addComponent(chckCost))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(chckFlow)
												.addComponent(chckDist))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(chckVertexName)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addContainerGap())
				);

		CtrShowHide.setEditable(false);
		CtrShowHide.setBackground(java.awt.Color.lightGray);
		CtrShowHide.setColumns(1);
		CtrShowHide.setRows(5);
		CtrShowHide.setText(">\n>");
		CtrShowHide.setFocusable(false);
		CtrShowHide.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				CtrShowHideMouseClicked(evt);
			}
			public void mouseExited(java.awt.event.MouseEvent evt) {
				CtrShowHideMouseExited(evt);
			}
			public void mouseEntered(java.awt.event.MouseEvent evt) {
				CtrShowHideMouseEntered(evt);
			}
		});
		jScrollPane2.setViewportView(CtrShowHide);

		jMenu1.setText("File");

		menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
		menuSave.setText("Save Graph");
		menuSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuSaveActionPerformed(evt);
			}
		});
		jMenu1.add(menuSave);

		menuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
		menuLoad.setText("Load Graph");
		menuLoad.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuLoadActionPerformed(evt);
			}
		});
		jMenu1.add(menuLoad);

		menuShowGrid.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
		menuShowGrid.setText("Show Grid");
		menuShowGrid.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuDrawAxisActionPerformed(evt);
			}
		});
		jMenu1.add(menuShowGrid);

		menuScale.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
		menuScale.setText("Scale");
		menuScale.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuScaleActionPerformed(evt);
			}
		});
		jMenu1.add(menuScale);

		exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
		exitMenuItem.setText("Exit");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitMenuItemActionPerformed(evt);
			}
		});
		jMenu1.add(exitMenuItem);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("Graph");

		menuCreateRandomGraph.setText("Generate Random");
		menuCreateRandomGraph.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuCreateRandomGraphActionPerformed(evt);
			}
		});
		jMenu2.add(menuCreateRandomGraph);

		btnMakeComplete.setText("Make Complete");
		btnMakeComplete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnMakeCompleteActionPerformed(evt);
			}
		});
		jMenu2.add(btnMakeComplete);

		menuExecutionPause.setText("Execution Pause");
		menuExecutionPause.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuExecutionPauseActionPerformed(evt);
			}
		});
		jMenu2.add(menuExecutionPause);

		menuResultPause.setText("Result Pause");
		menuResultPause.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuResultPauseActionPerformed(evt);
			}
		});
		jMenu2.add(menuResultPause);

		menuStopExec.setText("Stop Execution");
		menuStopExec.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuStopExecActionPerformed(evt);
			}
		});
		jMenu2.add(menuStopExec);

		menuCreateMap.setText("Create Map");
		menuCreateMap.setEnabled(false);
		menuCreateMap.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuCreateVerticesActionPerformed(evt);
			}
		});
		jMenu2.add(menuCreateMap);

		jMenuBar1.add(jMenu2);

		jMenu3.setText("Vertex");

		menuDeleteVertex.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
		menuDeleteVertex.setText("Delete");
		menuDeleteVertex.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuDeleteVertexActionPerformed(evt);
			}
		});
		jMenu3.add(menuDeleteVertex);

		btnMarkVisited.setText("Mark Visited/Unvisited");
		btnMarkVisited.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnMarkVisitedActionPerformed(evt);
			}
		});
		jMenu3.add(btnMarkVisited);

		jMenuBar1.add(jMenu3);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
										.addComponent(btnClearGraph)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jLabel1)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(txtVertexName, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btnapplyvertexname)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jLabel2)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(txtEdgeCost, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btnAddCost)
										.addGap(0, 0, Short.MAX_VALUE))
										.addComponent(jScrollPane1)
										.addComponent(pnlMain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(btnClearGraph)
												.addComponent(btnEdit)
												.addComponent(jLabel1)
												.addComponent(txtVertexName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(btnapplyvertexname)
												.addComponent(jLabel2)
												.addComponent(txtEdgeCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(btnAddCost))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(layout.createSequentialGroup()
																.addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addComponent(jScrollPane2)))
																.addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																.addContainerGap())
				);

		pack();
	}

	private void menuCreateRandomGraphActionPerformed(java.awt.event.ActionEvent evt) {
		String nrVertices = JOptionPane.showInputDialog(null,
				"Enter Number of vertices",
				"Enter Number of vertices",
				JOptionPane.QUESTION_MESSAGE);
		drawing.createRandomGraph(Integer.parseInt(nrVertices));
	}

	private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {
		File root = new File(System.getProperty("user.home"));
		JFileChooser fc = new JFileChooser();
		fc.setCurrentDirectory(root);
		fc.setSelectedFile(new File("Graph_"));
		int returnV = fc.showSaveDialog(null);
		if (returnV == JFileChooser.APPROVE_OPTION) {
			String name = fc.getSelectedFile().toString();
			drawing.save(name);
			this.setTitle(root + "\\" + name);
		}
	}

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		System.exit(0);
	}

	private void btnClearGraphActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.clearGraph();
	}

	private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {
		String txt = btnEdit.getText();
		if (txt.equals("Done")) {
			menuCreateMap.setEnabled(false);
			btnEdit.setText("Edit Graph");
			btnapplyvertexname.setEnabled(false);
			btnAddCost.setEnabled(false);
			txtVertexName.setEnabled(false);
			txtEdgeCost.setEnabled(false);
			drawing.done();
		} else {
			menuCreateMap.setEnabled(true);
			btnEdit.setText("Done");
			btnapplyvertexname.setEnabled(true);
			btnAddCost.setEnabled(true);
			txtVertexName.setEnabled(true);
			txtEdgeCost.setEnabled(true);
			drawing.edit();
		}
	}

	private void btnapplyvertexnameActionPerformed(java.awt.event.ActionEvent evt) {
		String vname = txtVertexName.getText();
		if (vname.isEmpty())
			drawing.addVertexRandName();
		else
			drawing.addVertex(txtVertexName.getText());
		txtVertexName.setText("");
		if (!txtEdgeCost.getText().isEmpty() || txtEdgeCost.getText().length() != 0) {
			drawing.addEdge(Integer.valueOf(txtEdgeCost.getText()));
			txtEdgeCost.setText("");
		}
		txtVertexName.requestFocus();
	}

	private void btnAddCostActionPerformed(java.awt.event.ActionEvent evt) {
		String vname = txtVertexName.getText();
		if (vname.isEmpty())
			drawing.addVertexRandName();
		else
			drawing.addVertex(txtVertexName.getText());
		txtVertexName.setText("");
		/*
    	if (!txtVertexName.getText().isEmpty() && txtVertexName.getText().length() != 0) {
            drawing.addVertex(txtVertexName.getText());
            txtVertexName.setText("");
        }
		 */
		int cost = 1;
		if (!txtEdgeCost.getText().isEmpty()) {
			cost = Integer.parseInt(txtEdgeCost.getText());
		}
		drawing.addEdge(cost);
		txtEdgeCost.setText("");
		txtVertexName.requestFocus();
	}

	private void btnDijkstraActionPerformed(java.awt.event.ActionEvent evt) {
		JTextField src = new JTextField(5);
		JTextField dst = new JTextField(5);

		JPanel myPanel = new JPanel();
		myPanel.add(new JLabel("Source:"));
		myPanel.add(src);
		myPanel.add(Box.createHorizontalStrut(15)); // a spacer
		myPanel.add(new JLabel("Destination:"));
		myPanel.add(dst);

		int result = JOptionPane.showConfirmDialog(null, myPanel,
				"Please Enter Source and Destination", JOptionPane.OK_CANCEL_OPTION);
		if (result == JOptionPane.OK_OPTION) {
			drawing.Dijkstra(src.getText(), dst.getText());
		}
	}

	private void menuDrawAxisActionPerformed(java.awt.event.ActionEvent evt) {
		if (!showAxis) {
			drawing.drawAxis(true);
			menuShowGrid.setText("Hide Axis");
		} else {
			drawing.drawAxis(false);
			menuShowGrid.setText("Show Axis");
		}
		showAxis = !showAxis;
	}

	private void menuScaleActionPerformed(java.awt.event.ActionEvent evt) {
		String newScale = JOptionPane.showInputDialog(null,
				"New Scale" + "(Current: " + drawing.getScale() + ")",
				"Enter New Scale",
				JOptionPane.QUESTION_MESSAGE);
		drawing.changeScale(Integer.valueOf(newScale));
	}

	private void chckVertexNameActionPerformed(java.awt.event.ActionEvent evt) {                                               
		drawing.showVertexName(chckVertexName.isSelected());
	} 

	private void btnMSTActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.Kruskal_MST();
	}

	private void btnFordFulkersonActionPerformed(java.awt.event.ActionEvent evt) {
		String[] buttons = {"Max-Flow", "Perfect Matching", "Cancel"};
		int rc = JOptionPane.showOptionDialog(null, "Choose problem:", "Ford-Fulkerson",
				JOptionPane.WARNING_MESSAGE, 0, null, buttons, buttons[2]);
		if (rc == 0) {
			drawing.FordFulkerson_MaxFlow(false);
		} else if (rc == 1) {
			drawing.FordFulkerson_MaxFlow(true);
		}
	}

	private void btnIsBipartiteActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.isBipartite();
	}

	private void btnBFSActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.BFS();
	}

	private void btnDFSActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.DFS();
	}
	
	private void btnAStarActionPerformed(java.awt.event.ActionEvent evt) {                                         
		JTextField src = new JTextField(5);
		JTextField dst = new JTextField(5);

		JPanel myPanel = new JPanel();
		myPanel.add(new JLabel("Source:"));
		myPanel.add(src);
		myPanel.add(Box.createHorizontalStrut(15));
		myPanel.add(new JLabel("Destination:"));
		myPanel.add(dst);

		int result = JOptionPane.showConfirmDialog(null, myPanel,
				"Please Enter Source and Destination", JOptionPane.OK_CANCEL_OPTION);
		if (result == JOptionPane.OK_OPTION) {
			drawing.AStar(src.getText(), dst.getText());
		}
    }

	private void chckDirectedActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.setDirected(chckDirected.isSelected());
	}

	private void chckFlowActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.showEdgeFlow(chckFlow.isSelected());
	}

	private void chckCostActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.showEdgeCost(chckCost.isSelected());
	}

	private void chckDistActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.showVertexDist(chckDist.isSelected());
	}

	private void menuLoadActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.stopExecution();
		final JFileChooser fc = new JFileChooser(System.getProperty("user.home"));
		int returnV = fc.showOpenDialog(this);
		if (returnV == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			drawing.load(file.toString());
			this.setTitle(file.toString());
		}
	}

	private void btnMakeCompleteActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.makeComplete();
	}

	private void menuDeleteVertexActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.removeVertex();
	}

	private void btnMarkVisitedActionPerformed(java.awt.event.ActionEvent evt) {
		drawing.markVisitedUnvisited();
	}

	private void menuExecutionPauseActionPerformed(java.awt.event.ActionEvent evt) {
		String execPause = JOptionPane.showInputDialog(null,
				"Execution Pause(seconds):",
				String.valueOf((double) drawing.getGUIExecutionPause() / 1000)
				);
		drawing.updateGUIExecutionPause((int) (Double.parseDouble(execPause) * 1000));
	}

	private void menuResultPauseActionPerformed(java.awt.event.ActionEvent evt) {
		String resultPause = JOptionPane.showInputDialog(null,
				"Result Pause(seconds):",
				String.valueOf((double) drawing.getGUIResultPause() / 1000)
				);
		drawing.updateGUIResultPause((int) (Double.parseDouble(resultPause) * 1000)); 
	}

	private void menuStopExecActionPerformed(java.awt.event.ActionEvent evt) {                                             
		drawing.stopExecution();
	}

	private void menuCreateVerticesActionPerformed(java.awt.event.ActionEvent evt) {                                                   		
		String size = JOptionPane.showInputDialog(null,
				"Enter Map Size",
				"Enter Map Size",
				JOptionPane.QUESTION_MESSAGE);
		drawing.createMap(Integer.valueOf(size));
	}

	private void txtVertexNameKeyPressed(java.awt.event.KeyEvent evt) {                                         
		if (evt.getKeyCode() == 10) {
			String vname = txtVertexName.getText();
			if (vname.isEmpty())
				drawing.addVertexRandName();
			else
				drawing.addVertex(txtVertexName.getText());
			txtVertexName.setText("");
			if (!txtEdgeCost.getText().isEmpty() || txtEdgeCost.getText().length() != 0) {
				drawing.addEdge(Integer.valueOf(txtEdgeCost.getText()));
				txtEdgeCost.setText("");
			}
			txtVertexName.requestFocus();
		}
	}

	private void CtrShowHideMouseClicked(java.awt.event.MouseEvent evt) {
		if (infoPanelVisible) {
			pnlInfo.setVisible(false);
			CtrShowHide.setText("<\n<");
		} else {
			pnlInfo.setVisible(true);
			CtrShowHide.setText(">\n>");
		}
		infoPanelVisible = !infoPanelVisible;
	}

	private void CtrShowHideMouseEntered(java.awt.event.MouseEvent evt) {
		CtrShowHide.setBackground(java.awt.Color.GRAY);
	}

	private void CtrShowHideMouseExited(java.awt.event.MouseEvent evt) {
		CtrShowHide.setBackground(java.awt.Color.lightGray);
	}

	private void txtEdgeCostKeyPressed(java.awt.event.KeyEvent evt) {
		if (evt.getKeyCode() == 10) {
			if (!txtVertexName.getText().isEmpty() && txtVertexName.getText().length() != 0) {
				drawing.addVertex(txtVertexName.getText());
				txtVertexName.setText("");
			}
			int cost = 1;
			if (!txtEdgeCost.getText().isEmpty()) {
				cost = Integer.parseInt(txtEdgeCost.getText());
			}
			drawing.addEdge(cost);
			txtEdgeCost.setText("");
			txtVertexName.requestFocus();
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GraphGUI().setVisible(true);
			}
		});
	}

	private javax.swing.JTextArea CtrShowHide;
	private javax.swing.JButton btnAddCost;
	private javax.swing.JButton btnBFS;
	private javax.swing.JButton btnClearGraph;
	private javax.swing.JButton btnDFS;
	private javax.swing.JButton btnDijkstra;
	private javax.swing.JButton btnEdit;
	private javax.swing.JButton btnFordFulkerson;
	private javax.swing.JButton btnIsBipartite;
	private javax.swing.JButton btnMST;
	private javax.swing.JButton btnAStar;
	private javax.swing.JMenuItem btnMakeComplete;
	private javax.swing.JMenuItem btnMarkVisited;
	private javax.swing.JButton btnapplyvertexname;
	private javax.swing.JCheckBox chckCost;
	private javax.swing.JCheckBox chckDirected;
	private javax.swing.JCheckBox chckDist;
	private javax.swing.JCheckBox chckFlow;
	private javax.swing.JCheckBox chckVertexName;
	private javax.swing.JTextArea console;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JMenuItem menuCreateRandomGraph;
	private javax.swing.JMenuItem menuCreateMap;
	private javax.swing.JMenuItem menuDeleteVertex;
	private javax.swing.JMenuItem menuShowGrid;
	private javax.swing.JMenuItem menuExecutionPause;
	private javax.swing.JMenuItem menuResultPause;
	private javax.swing.JMenuItem menuLoad;
	private javax.swing.JMenuItem menuSave;
	private javax.swing.JMenuItem menuScale;
	private javax.swing.JMenuItem menuStopExec;
	private javax.swing.JPanel pnlInfo;
	private javax.swing.JPanel pnlMain;
	private javax.swing.JTextField txtEdgeCost;
	private javax.swing.JTextField txtInfoAdj;
	private javax.swing.JTextField txtInfoAdjEntering;
	private javax.swing.JTextField txtInfoCost;
	private javax.swing.JTextField txtInfoDist;
	private javax.swing.JTextField txtInfoFlow;
	private javax.swing.JTextField txtInfoVertexName;
	private javax.swing.JTextField txtInfoVisited;
	private javax.swing.JTextField txtVertexName;
}
